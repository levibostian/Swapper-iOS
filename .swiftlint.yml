disabled_rules: # rule identifiers to exclude from running
  - line_length
  - trailing_whitespace
  - empty_enum_arguments
  - identifier_name
  - function_body_length
  - cyclomatic_complexity
  - force_try
  - generic_type_name
  - function_parameter_count
opt_in_rules: # some rules are only opt-in
  # - empty_count
  # Find all the available rules by running:
  # swiftlint rules
included: # paths to include during linting. `--path` is ignored if present.
  - Swapper
excluded: # paths to ignore during linting. Takes precedence over `included`.  
  - Example/Pods
  # - Source/ExcludedFolder
  # - Source/ExcludedFile.swift

# configurable rules can be customized from this configuration file
# binary rules can set their severity level
force_cast: warning # implicitly
force_try:
  severity: warning # explicitly
identifier_name:
  min_length: # only min_length
    error: 3 # only error
  excluded: # excluded via string array
    - key
    - id
    - map
    - URL
    - GlobalAPIKey
reporter: "xcode" # reporter type (xcode, json, csv, checkstyle)

custom_rules:
  use_contentview_tableviewcell: # use `contentView` instead of the `view` property when adding views in TableViewCell subclasses.
    included: ".*TableViewCell\\.swift" # regex that defines paths to include during linting. optional.
    name: "Add subviews to `contentView` instead of the cell's `view`."
    regex: "^(?!.*?contentView\\.addSubview).*addSubview.*" # matching pattern
    message: "Are you sure you wanted to call `addSubview` on `self.view`? Did you mean to use the `contentView`?"
    severity: error